package web.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.SecurityFilterChain;

import web.service.DaoUserDetailsManager;

@Configuration
public class SecurityConfig {

    @Bean
    public UserDetailsService userDetailsService() {
        return new DaoUserDetailsManager();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable()).cors(cors -> cors.disable());

        http.authorizeHttpRequests(auth -> auth
            .requestMatchers("/poly/url1").authenticated()
            .requestMatchers("/poly/url2").hasRole("USER")
            .requestMatchers("/poly/url3").hasRole("ADMIN")
            .requestMatchers("/poly/url4").hasAnyRole("USER", "ADMIN")
            .anyRequest().permitAll()
        );

        http.formLogin(form -> form
            .loginPage("/login/form")
            .loginProcessingUrl("/login/check")
            .defaultSuccessUrl("/login/success", false)
            .failureUrl("/login/failure")
            .usernameParameter("email")
            .passwordParameter("matkhau")
            .permitAll()
        );

        http.logout(logout -> logout
            .logoutUrl("/logout")
            .logoutSuccessUrl("/login/exit")
            .invalidateHttpSession(true)
            .clearAuthentication(true)
            .deleteCookies("remember-me")
        );

        http.exceptionHandling(ex -> ex
            .accessDeniedPage("/access-denied.html")
        );

        return http.build();
    }
}

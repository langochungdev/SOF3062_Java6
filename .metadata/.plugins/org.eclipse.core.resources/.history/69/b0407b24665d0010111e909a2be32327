package web.config;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return PasswordEncoderFactories.createDelegatingPasswordEncoder();
    }

    @Bean
    public UserDetailsService userDetailsService(PasswordEncoder pe) {
        String password = pe.encode("123");
        UserDetails user1 = User.withUsername("user@gmail.com").password(password).roles().build();
        UserDetails user2 = User.withUsername("admin@gmail.com").password(password).roles().build();
        UserDetails user3 = User.withUsername("both@gmail.com").password(password).roles().build();
        return new InMemoryUserDetailsManager(user1, user2, user3);
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(config -> config.disable()).cors(config -> config.disable());

        http.authorizeHttpRequests(config -> {
            config.anyRequest().permitAll();
        });

        http.formLogin(config -> {
            config.permitAll();
        });

        http.rememberMe(config -> {
            config.tokenValiditySeconds(3 * 24 * 60 * 60);
        });

        http.logout(Customizer.withDefaults());

        return http.build();
    }
}
